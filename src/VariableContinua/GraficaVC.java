/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VariableContinua;

import static VariableContinua.VentanaVContinua.Tabla;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartPanel;

/**
 *
 * @author JL
 */
public class GraficaVC extends javax.swing.JDialog {

    /**
     * Creates new form GraficaVC
     */
    public GraficaVC(java.awt.Frame parent, boolean modal) throws IOException {
        super(parent, modal);
        this.setTitle("GrÃ¡fica Variable Continua");
        Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Multimedia/icoGraf.png"));
        setIconImage(icon);
        this.setLocationRelativeTo(null);
        initComponents();
        generarGrafica();
    }
    public void generarGrafica() 
    {
        try
        {
           
            Procesos obj=new Procesos();
            int num=Tabla.getRowCount();
            double []datos=new double[num];
            String[] vector2=new String[num];
            if(num>0)
            {
                for(int i=0;i<num;i++)
                {
                    datos[i]=Double.parseDouble(Tabla.getValueAt(i,2).toString());
                    vector2[i]=Tabla.getValueAt(i,1).toString();
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null,"ERROR: No hay datos para Graficar","Mensaje",JOptionPane.ERROR_MESSAGE);
            }

            ChartPanel CP= new ChartPanel(obj.grafica(datos, vector2));
            CP.setSize(630, 400);	        
            GrafPanel2.add(CP,BorderLayout.CENTER);
            GrafPanel2.setVisible(true);
            CP.repaint();
        }catch(Exception e)
        {
            
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrafPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout GrafPanel2Layout = new javax.swing.GroupLayout(GrafPanel2);
        GrafPanel2.setLayout(GrafPanel2Layout);
        GrafPanel2Layout.setHorizontalGroup(
            GrafPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );
        GrafPanel2Layout.setVerticalGroup(
            GrafPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(GrafPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(GrafPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GrafPanel2;
    // End of variables declaration//GEN-END:variables
}
