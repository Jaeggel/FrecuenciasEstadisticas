/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VariableDiscreta;

import static VariableDiscreta.VentanaVDiscreta.Tabla;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartPanel;

/**
 *
 * @author JL
 */
public class GraficaVD extends javax.swing.JDialog {

    /**
     * Creates new form GraficaVD
     */
    public GraficaVD(java.awt.Frame parent, boolean modal){
        super(parent, modal);
        try {
            Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Multimedia/icoGraf.png"));
            setIconImage(icon);
            initComponents();
            this.setLocationRelativeTo(null);
            this.setTitle("GrÃ¡fica Variable Discreta");
            generarGrafica();
        } catch (IOException ex) {
            Logger.getLogger(GraficaVD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void generarGrafica() throws IOException 
    {          
        Procesos obj=new Procesos();
        int num=Tabla.getRowCount();
        double []datos=new double[num];
        String[] vector2=new String[num];
        if(num>0)
        {
            for(int i=0;i<num;i++)
            {
                datos[i]=Double.parseDouble(Tabla.getValueAt(i,2).toString());
                vector2[i]=Tabla.getValueAt(i,1).toString();
            }
        }
        else 
        {
            JOptionPane.showMessageDialog(null,"ERROR: No hay datos para Graficar","Mensaje",JOptionPane.ERROR_MESSAGE);            
        }
        ChartPanel CP= new ChartPanel(obj.grafica(datos, vector2));       
        CP.setSize(400, 400);
        PanelGraf1.add(CP,BorderLayout.CENTER);
        PanelGraf1.setVisible(true);
        CP.repaint();
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelGraf1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout PanelGraf1Layout = new javax.swing.GroupLayout(PanelGraf1);
        PanelGraf1.setLayout(PanelGraf1Layout);
        PanelGraf1Layout.setHorizontalGroup(
            PanelGraf1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        PanelGraf1Layout.setVerticalGroup(
            PanelGraf1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelGraf1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelGraf1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelGraf1;
    // End of variables declaration//GEN-END:variables
}
